<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Transliterate Latin, Cyrillic, Greek, Georgian, Viking runes and more</title>
<meta name="description" content="Convert text easily with this versatile transliterator.
Transliterate between Latin, Cyrillic, Greek, Georgian, Viking Fuþark and your own alphabets online.">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Security-Policy"
      content="default-src 'unsafe-inline';style-src 'unsafe-inline'">
<style>
body{font-family:helvetica,sans-serif;color:DarkSlateGray;padding:.5rem}
header{text-align:center;padding:.5rem}
header{text-transform:uppercase;font-size:.9rem;padding-top:.5rem}
header a{letter-spacing:.2rem;color:DarkGoldenRod}
header b{font-weight:normal}
a{color:RoyalBlue;text-decoration:none}
button,textarea,#banner{border-radius:3px;border:1px solid gainsboro}
textarea{padding:.2rem}
textarea,form span{display:inline-block}
form span{padding:3px 3px 0 0;width:1.4rem;font-size:.9rem;position:relative;top:-1rem}
button{background:none}
#result{display:block;padding:1rem 1rem 0;font-size:1.2em}
#txt{padding:0.5rem;font-size:1rem}
#txt{width:100%;box-sizing:border-box}
#inp,#out{font-family:monospace;min-width:calc(100% - 2.4rem)}
#langs{padding:0}
#langs li{display:inline-block;list-style:none;padding-right:1em}
#langs a{font-size:.8rem}
#langs,.submit{text-align:center}
#swap{background:DarkGoldenRod;border-color:DarkGoldenRod;color:white}
#copy{text-align:center;display:block;font-size:smaller;display:none;color:DeepPink}
#reset{display:none;position:absolute;top:1rem;right:1rem;font-size:.9rem;font-weight:bold;color:silver}
#banner{padding:0.5rem;margin-top:5rem;display:inline-block;border-color:Goldenrod;box-shadow:0 0 5px Goldenrod}
</style>
</head>
<body>
<header>
    <a href="/" class="logo">Unilexicon</a>
    <b>Transliterate</b>
</header>
<main>
    <form name="translit">
        <p><textarea id="txt" name="txt" rows="4"
            placeholder="Enter text / введите текст / εισαγάγετε κείμενο / შეიყვანეთ ტექსტი / ᛋᛚᚨᚦᚢ ᛁᚾᚾ ᛏᛖᚲᛏᛅ…"></textarea>
        <ul id="langs">
            <li><button id="swap">↑↓</button>
        </ul>
        <p id="io">
          <span>·→</span><textarea id="inp" name="inp"
             placeholder="a b v g d…  sh ch oo…   the *ed ph*"></textarea>
             <br>
          <span>→·</span><textarea id="out" name="out"
             placeholder="а б в г д…   š  č  ú…   d   d   f"></textarea>
        <output id="result"></output>
        <a id="copy"  href="#">copy</a>
        <a id="reset" href="#" title="reset">×</a>
    </form>
    <p id="banner">
        <a href="/pro/subscribe">Transliterate websites to Latin Script with Pro+</a>
        <br>Just add the site after:
        <kbd><a href="/translit/">unilexicon.com/translit/</a><u>yourwebsite.com</u></kbd>
    </p>
</main>

<!--div id="cookie-consent"></div>
<script src="https://unilexicon.com/assets/js/cookies.js?1.72"></script-->
<script>
const maps = {
  cy_xx: "а б в г д е ё ж з и й к л м н о п ку р с т у ф  х ц ч ш  щ ъ ы ь э  ю  я",
  cy_sk: "a b v g d e é ž z i j k l m n o p q  r s t u f ch c č š šč ъ y ' é ju ja",
  gr_xx: "α β γ δ ε ζ η  θ ι κ λ μ ν ξ ο π ρ σ τ υ φ  χ  ψ ω",
  gr_la: "a b g d e z i th i k l m n x o p r s t u f ch ps o",
  ka_xx: "ა ბ ვ გ დ ე ვ ზ თ ი კ ლ მ ნ ო პ რ ს ტ უ ფ ქ  ღ ყ შ ჩ ც  ძ  წ  ჭ  ხ ჯ ჰ",
  ka_sk: "a b v g d e v z t i k l m n o p r s t u f k gh q š č c ts dz ts kh j h",
  fu_la: "a á b c d e f g h i ï j k l m n ŋ o p q r s t þ ð u v w x y z",
  fu_xx: "ᚨ ᚨ ᛒ  ᚲ ᛞ ᛖ ᚠ ᚷ ᚺ  ᛁ ᛇ ᛃ ᚲ ᛚ ᛗ ᚾ ᛜ ᛟ ᛈ ᛩ ᚱ  ᛋ ᛏ ᚦ ᚦ ᚢ  ᚢ ᚹ ᛪ ᛦ ᛉ",
  gl_xx: "ⰰ ⰱ ⰲ ⰳ ⰳ ⰴ ⰵ ⰶ ⰸ ⰹ ⰺ ⰻ ⰼ ⰽ ⰾ ⰿ ⱀ ⱁ ⱂ ⱃ ⱄ ⱅ ⱆ ⱇ ⱈ  ⱉ ⱊ ⱋ ⱌ ⱍ ⱎ ⱏ ⱐ ⱑ  ⱒ  ⱓ  ⱔ  ⱕ ⱖ  ⱗ ⱘ ⱙ ⱚ ⱛ ⱜ ⱝ ⱞ",
  gl_sk: "a b  v g h d  e ž z  i j i ď k l m n o p r s t  u f ch ó p št c č š ú í ja ch ju ah á io ie ô iô θ y ľ ň ľ",
};
const lookup = {
  'cylat': { inp: 'cy_sk', out: 'cy_xx', label: 'а́збука', title: 'Cyrillic'},
  'grlat': { inp: 'gr_la', out: 'gr_xx', label: '🇬🇷 αβγ', title: 'Greek'},
  'kalat': { inp: 'ka_sk', out: 'ka_xx', label: '🇬🇪 აბვ', title: 'Georgian'},
  'fulat': { inp: 'fu_la', out: 'fu_xx', label: 'ᚠᚢᚦᚨᚱᚲ', title: 'Viking Futhark'},
  'gllat': { inp: 'gl_sk', out: 'gl_xx', label: 'ⰃⰎⰀ', title: 'Slavic Glagolitsa'},
};
const form = document.forms['translit'];
function Id(s){return document.getElementById(s);}

function updateURL(f) {
  const data = new FormData(f);
  const qs = new URLSearchParams(data).toString();
  const curr = new URL(window.location.href);
  const newURL = `${curr.pathname}?${qs}`;
  history.replaceState(null, null, newURL);
}

function flexi(textarea, pad){
    // flexible height textarea
    if (textarea){
        textarea.style.height = (textarea.scrollHeight + pad) + "px";
        textarea.oninput = function() {
            textarea.style.height = ""; /* Reset the height*/
            textarea.style.height = (textarea.scrollHeight + pad) + "px";
        };
    }
}

function detectlanguage(text) {
  const lc = {};
  for (const l in maps) {
    lc[l] = 0;
    for (const c of text) {
      if (maps[l].includes(c)) lc[l]++;
    }
  }
  return Object.keys(lc).reduce((a, b) => lc[a] > lc[b] ? a : b);
}


function inputwatch(e){
  if(!form.inp.value){
    var lang = detectlanguage(form.txt.value);
    if (lang.endsWith('xx')){  // prefill detected langugage
      var code = `${lang[0]}${lang[1]}lat`;
      console.log(code);
      form.inp.value = maps[lookup[code].out];
      form.out.value = maps[lookup[code].inp];
    } else { // default latin to cyrillic
      form.inp.value = maps.cy_sk;
      form.out.value = maps.cy_xx;
    }
  }
  translit(form.txt.value);
}

function swap(e){
  e.preventDefault();
  var a = form.inp.value;
  var b = form.out.value;
  form.inp.value = b;
  form.out.value = a;
  translit(form.txt.value);
}

function reset(e){
  e.preventDefault();
  ['inp', 'out', 'txt'].forEach(p => form[p].value = '');
  Id('result').textContent = '';
  Id('copy').style.display = 'none';
  updateURL(form);
}

function copy(e){
  e.preventDefault();
  navigator.clipboard.writeText(Id('result').textContent);
  this.textContent = 'copied';
  this.style.color = 'silver';
  setTimeout(() => {
    this.textContent = "copy";
    this.style.color = 'DeepPink';
  }, 1400);
}

function initTranslitForm() {
  const params = new URLSearchParams(window.location.search);
  ['inp', 'out', 'txt'].forEach(p => form[p].value = form[p].value || params.get(p));
  flexi(Id('txt'), 5);
  flexi(Id('inp'), 0);
  flexi(Id('out'), 0);
  Id('txt').focus();
  // create alphabet links and make them set inp/out fields
  for (const code in lookup) {
    const { inp, out, label, title } = lookup[code];
    const li = document.createElement('li');
    const a = document.createElement('a');
    a.id = code;
    a.href = '#';
    a.title = title;
    a.textContent = label;
    a.addEventListener('click', function(e) {
      e.preventDefault();
      form.inp.value = maps[inp];
      form.out.value = maps[out];
      translit(form.txt.value);
    });
    li.appendChild(a);
    Id('langs').appendChild(li);
  }
  Id('txt').addEventListener('input', inputwatch);
  Id('swap').addEventListener('click', swap);
  Id('copy').addEventListener('click', copy);
  Id('reset').addEventListener('click', reset);
  translit(form.txt.value);
}
document.addEventListener('DOMContentLoaded', initTranslitForm);

function translit(txt) {
  if(!txt) return;
  const inpMap = form.inp.value.split(/\s+/);
  const outMap = form.out.value.split(/\s+/);
  const ioMap = inpMap.map((a, i) => [a, outMap[i]]);
  const result = txt.split(' ').map(word => {
    for (const [a, b] of ioMap) {
      const ar = new RegExp(a, 'g');
      if (word === word.toUpperCase()) {
        word = word.toLowerCase().replace(ar, b).toUpperCase();
      } else if (word === word.charAt(0).toUpperCase() + word.slice(1)) {
        word = word.toLowerCase().replace(ar, b).replace(/^\w/, c => c.toUpperCase());
      } else {
        word = word.replace(ar, b);
      }
      // word beginnings and endings
      if (a.startsWith('*') || a.endsWith('*')) {
        a = a.replace(/\*/g, '');
        if (word.startsWith(a) || word.endsWith(a)) {
          word = word.replace(new RegExp(a, 'g'), b);
        }
      }
    }
    return word;
  });
  //const [newA, newB] = ioMap.reduce(([aAcc, bAcc], [a, b]) => {
  //  const newA = b.length > a.length ? a.padStart(b.length) : a;
  //  const newB = a.length > b.length ? b.padStart(a.length) : b;
  //  return [aAcc.concat(newA), bAcc.concat(newB)];
  //  }, [[], []]);
  //form.inp.value = newA.join(' ');
  //form.out.value = newB.join(' ');

  Id('result').innerText = result.join(' ');
  Id('reset').style.display = 'inline';
  Id('copy').style.display = 'block';
  updateURL(form);
}
</script>
</body>
</html>
